[project]
name = "recommendation-engine"
version = "0.1.0"
description = "Recommendation Engine is a Python API with MongoDB"
requires-python = ">=3.13"
dependencies = [
    "fastapi[standard]==0.116.1",
    "uvicorn==0.35.0",
    "python-dotenv==1.1.1",
    "pyjwt==2.10.1",
    "cryptography==45.0.5",
    "pymongo==4.13.0"
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["recommendation_engine"]


[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pytest-asyncio==1.2.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.12",
]

# -----------------------------------------------------------
#       RUFF | Lint + Formatter + Import Sorter
# -----------------------------------------------------------
[tool.ruff]
line-length = 120
target-version = "py313"
src = ["recommendation_engine"]
extend-exclude = [".venv", ".git", "docs", "migrations", "admin.py"]

[tool.ruff.format]
quote-style = "preserve"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "RUF", # RUF: Ruff-specific improvements
    "D", # pydocstyle
    "S"     # bandit (security)
]

ignore = [
    "D1", # disable docstring required rules project-wide
    "S104",
    "S324"
]

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__ files as these are convenience imports
"**/__init__.py" = ["F401"]
"**/tests/**/*" = ["S101", "S105", "S106", "D", "T20", "PLR0913"]
"scripts/*" = ["T20", "RUF005"]
"**/settings.py" = ["S105"]


[tool.ruff.lint.isort]
known-first-party = ["recommendation_engine"]
lines-after-imports = 2
combine-as-imports = true
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

# -----------------------------------------------------------
#       mypy | type checks
# -----------------------------------------------------------
[tool.mypy]
python_version = "3.13"

exclude = [
    "migrations/",
    'tests/',
    ".venv",
]
disable_error_code = ["arg-type", "attr-defined", "var-annotated", "unused-ignore"]
show_error_codes = true
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true        # force type hints on functions
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
pretty = true

# Don't force test functions to include types.
[[tool.mypy.overrides]]
module = [
    "*.tests.*",
]
disallow_untyped_defs = false
check_untyped_defs = false
disable_error_code = ["type-arg", "no-untyped-def"]

# Ignore errors from packages that don't have type annotations.
[[tool.mypy.overrides]]
module = [
    "fastapi.*",
]
ignore_missing_imports = true


# -----------------------------------------------------------
#      Pytest
# -----------------------------------------------------------
[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = [
    ".",
    "recommendation_engine"
]
testpaths = ["tests", "recommendation_engine"]
asyncio_mode = "auto"
addopts = [
    "--tb=short",
    "--disable-warnings",
    "--verbose",
    "--capture=no",
    "--color=auto"
]
markers = [
    "unit: fast unit tests",
    "integration: integration tests",
    "e2e: end-to-end tests"
]

[tool.coverage.run]
branch = true
source = ["recommendation_engine"]
omit = [
    "*/main.py",
    "*/__init__.py",
    "*/setup_logger.py",
    "*/secure.py",
    "*/providers.py",
    "*/migrations/*",
    "*/tests/*",
]
[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 85
